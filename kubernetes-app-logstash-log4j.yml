- hosts: all
  tasks:
  - name: Publish kube cluster event.
    kube_cluster_event:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
      message: "Starting {{ application_name }} deployment."

  - name: Create Logstash Replication Controller.
    kubernetes:
      endpoint: "{{ apiserver_endpoint }}"
      state: present
      model:
        apiVersion: v1
        kind: ReplicationController
        metadata:
          name: "{{ application_name }}-rc"
          namespace: default
        spec:
          replicas: 1
          imagePullPolicy: IfNotPresent
          selector:
            app: "{{ application_name }}"
          template:
            metadata:
              labels:
                app: "{{ application_name }}"
            spec:
              containers:
              - name: "logstash"
                image: logstash:2.1
                args:
                - -e
                - 'input { log4j { } } output { elasticsearch { hosts => ["{{ elasticsearch_host }}:{{ elasticsearch_port }}"] } }'
                ports:
                - containerPort: 4560
            restartPolicy: Always

  - name: Publish kube cluster event.
    kube_cluster_event:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
      message: "{{ application_name }} replication controller created."

  - name: Create Logstash Service
    kubernetes:
      endpoint: "{{ apiserver_endpoint }}"
      state: present
      model:
        apiVersion: v1
        kind: Service
        metadata:
          name: "{{ application_name }}"
          namespace: default
          labels:
            app: "{{ application_name }}"
        spec:
          type: NodePort
          ports:
          - port: 4560
            targetPort: 4560
            protocol: TCP
          selector:
            app: "{{ application_name }}"
    register: service_resp
    
  - name: Update the stored cluster app configuration.
    kube_cluster_app_patch:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
      cluster_app_id: "{{ cluster_app_id }}"
      patch:
        port: "{{ service_resp.content.spec.ports[0].nodePort }}"    
            
  - name: Publish kube cluster event.
    kube_cluster_event:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
      message: "{{ application_name }} service created."