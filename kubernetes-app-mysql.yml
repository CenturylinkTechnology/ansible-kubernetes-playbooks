- hosts: localhost
  connection: local
  tasks:
  - name: Update the stored cluster app configuration.
    kube_cluster_app_patch:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
      cluster_app_id: "{{ cluster_app_id }}"
      patch:
        state: "installing"

  - name: Fetch storage configuration.
    kube_cluster_storage_get:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
      storage_id: "{{ storage_id }}"
    register: storage
    
  - name: Fetch cluster configuration.
    kube_cluster_get:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
    register: master
      
  - name: Add gcfs server to in-memory inventory.
    add_host:
      name={{ storage.content.name }}
      ansible_ssh_host={{ storage.content.storage_ip }}
      ansible_ssh_user={{ storage.content.storage_ssh_user }}
      ansible_ssh_pass={{ storage.content.storage_ssh_pass }}
      gcfs_ip={{ storage.content.storage_ip }}
      volume_name={{ application_name }}
      volume_path=/{{ application_name }}
      groups=gcfs
      
  - name: Add master server to in-memory inventory.
    add_host:
      name={{ master.content.name }}
      ansible_ssh_host={{ master.content.master_ip }}
      ansible_ssh_user={{ master.content.master_ssh_user }}
      ansible_ssh_pass={{ master.content.master_ssh_pass }}
      gcfs_ip={{ storage.content.storage_ip }}
      volume_name={{ application_name }}
      volume_path=/{{ application_name }}
      groups=master
      
- hosts: gcfs
  roles:
    - gluster-volume
    
- hosts: "master" 
  tasks:
  - name: Create GCFS Endpoint
    kubernetes:
      endpoint: "{{ apiserver_endpoint }}"
      state: present
      model:
        apiVersion: v1
        kind: Endpoints
        metadata:
          name: "{{ application_name }}"
          namespace: default
        subsets:
          - addresses:
            - ip: "{{ gcfs_ip }}"
            ports:
            - port: 24007

  - name: Create mysql Replication Controller.
    kubernetes:
      endpoint: "{{ apiserver_endpoint }}"
      state: present
      model:
        apiVersion: v1
        kind: ReplicationController
        metadata:
          name: "{{ application_name }}-rc"
          namespace: default
        spec:
          replicas: 1
          imagePullPolicy: IfNotPresent
          selector:
            app: "{{ application_name }}"
          template:
            metadata:
              labels:
                app: "{{ application_name }}"
            spec:
              volumes:
              - name: msql-volume
                glusterfs:
                  endpoints: "{{ application_name }}"
                  path: "{{ application_name }}"
                  readOnly: false
              containers:
              - name: "mysql"
                image: mysql:5.7
                volumeMounts:
                - mountPath: "/var/lib/mysql"
                  name: msql-volume
                env:
                - name: MYSQL_ROOT_PASSWORD
                  value: password
                args:
                - "--datadir=/var/lib/mysql/data"
                ports:
                - containerPort: 3306
            restartPolicy: Always

  - name: Create mysql Service
    kubernetes:
      endpoint: "{{ apiserver_endpoint }}"
      state: present
      model:
        apiVersion: v1
        kind: Service
        metadata:
          name: "{{ application_name }}"
          namespace: default
          labels:
            app: "{{ application_name }}"
        spec:
          type: NodePort
          ports:
          - port: 3306
            targetPort: 3306
            protocol: TCP
          selector:
            app: "{{ application_name }}"
    register: service_resp
    
  - name: Update the stored cluster app configuration.
    kube_cluster_app_patch:
      endpoint: "{{ services_endpoint }}"
      authorization: "{{ authorization }}"
      account_alias: "{{ account_alias }}"
      cluster_id: "{{ cluster_id }}"
      cluster_app_id: "{{ cluster_app_id }}"
      patch:
        port: "{{ service_resp.content.spec.ports[0].nodePort }}"
        state: "ready"
